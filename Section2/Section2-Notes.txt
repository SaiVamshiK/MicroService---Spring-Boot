Spring Boot:
To minimize the configurations we used to have in the spring framework, Spring boot came into picture. Spring boot is an abstraction of the Spring framework.
All basic configurations are already added in Spring boot.

Dependency Injection: 
This is implemented by Spring boot framework. 
Example: 
Say there is a Student class that has "name", "email" and Subject class.
The Subject is another class that has "subject name" and "teacher name".
Here the student class is dependent on the subject class.
So whenever we use the student class we need to create objects for the subject class as well.
This is tedious.
So we use IOC (inversion of control) and give the control to Spring framework to create the objects.
Now all the dependencies are handled by the Spring framework itself.
All the classes in the Spring framework is defined as a bean.
When we run the spring app, all the beans are created and stored in the Spring container.
If any bean is dependent on any other bean, spring framework takes care of injecting it based on the scope defined.

Spring Initializer:
Go to the spring initializer, add the spring web dependency to the project and download it.
Run the application, we see that the application is running on the default tomcat server we get.
We get the whitelabel error page when we go to the localhost:8080/ since we do not have any mapping yet.

More about Spring boot:
IOC container will have all the beans we have defined. When we hit the run method the IOC container will be used to create a context.
Either it can be a web context or application context.
And the embedded server is used to attach the context to it, in order to start the application.

Embedded Servers:
General Deployment : Application -> Create JAR/WAR -> Deploy to Server.
With Spring boot : Application + Embedded Server -> Deploy it.
The tomcat is a default we get with spring boot.

Now we have removed the tomcat dependency and after running we see our application is not running in any server.
